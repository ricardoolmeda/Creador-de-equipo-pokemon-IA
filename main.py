import openai
from config import *

def obtener_preguntas_pokemon():
    return [
        "¬øCu√°l es tu Pok√©mon favorito?",
        "Si pudieras vivir en una regi√≥n del mundo Pok√©mon, ¬øcu√°l elegir√≠as?",
        "¬øTipo favorito?",
        "¬øPrefieres entrenar Pok√©mon de un tipo espec√≠fico o te gusta tener un equipo variado?",
        "¬øTe gusta otro tipo?, ¬øcu√°l?",
        "¬øTe gustan los pokemons legendarios para tu equipo?",
        "¬øTe gusta tener un equipo pokemon solo de una regi√≥n?",
        "¬øCu√°l es tu juego de Pok√©mon favorito?",
        "¬øTe identificas con alg√∫n entrenador o personaje de la serie Pok√©mon?",
        "¬øPrefieres batallar en gimnasios o participar en concursos Pok√©mon?",
        "Si pudieras tener un Pok√©mon en la vida real, ¬øcu√°l escoger√≠as y por qu√©?"
    ]

def preguntas_pokemon(preguntas):
    respuestas = []
    for pregunta in preguntas:
        respuesta = input(pregunta + " ")
        respuestas.append(respuesta)
    return respuestas

def sugerir_movimientos_pokemon_especificos():
    pokemon_list = input("Ingresa los nombres de los Pok√©mon separados por comas: ").split(',')
    pokemon_list = [pokemon.strip() for pokemon in pokemon_list]
    return pokemon_list

def mejor_bot():
    bot =[
        "El cual se llama PokeBot",
        "Este es el enlace para acceder a √©l",
        "https://t.me/@PokeCalculator_bot"

    ]
    print("\"Claro uno de los bot m√°s completos es un bot de telegram")
    for i, bots in enumerate(bot, 1):
        print(f"Bot {i}: {bots}")

def menu_recomendaciones():
    print("1. Recomendar equipo")
    print("2. Repetir cuestionario")
    print("3. Mostrar respuestas a las preguntas")
    print("4. Sugerir movimientos para el equipo Pok√©mon recomendado")
    print("5. Sugerir movimientos a Pok√©mon espec√≠ficos")
    print("6. Consejos de crianza")
    print("7. Mejor Bot para ver estad√≠sticas")
    print("8. Volver al men√∫ principal")
    
    return input("Selecciona una opci√≥n: ")

def main():
    openai.api_key = MY_KEY  # Cambiar la key por la propia
    print("üí¨ ChatGPT API en Python")

    # Contexto del asistente
    context = {"role": "system", "content": "Eres un asistente muy √∫til y amigable, siempre dispuesto a ayudar y a hacer la conversaci√≥n m√°s entretenida."}
    messages = [context]

    # Obtener preguntas de Pok√©mon
    preguntas = obtener_preguntas_pokemon()

    # Preguntas de Pok√©mon
    respuestas_usuario = preguntas_pokemon(preguntas)

    equipo_pokemon = None  # Inicializar variable de equipo

    while True:
        option = menu_recomendaciones()

        if option == "1":
            # Recomendamos el equipo seg√∫n las preguntas
            content = "Basado en mis respuestas: " + str(respuestas_usuario) + ". ¬øCu√°l ser√≠a un buen equipo Pok√©mon?"
            messages.append({"role": "user", "content": content})
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=messages
            )
            response_content = response.choices[0].message.content
            messages.append({"role": "assistant", "content": response_content})
            print(f"> {response_content}")
            equipo_pokemon = response_content  # Guardamos el equipo recomendado
       
        elif option == "2":
            respuestas_usuario = preguntas_pokemon(preguntas)  # Actualizar respuestas
            print("\nTus nuevas respuestas:")
            for i, respuesta in enumerate(respuestas_usuario, 1):
                print(f"Pregunta {i}: {respuesta}")
        
        elif option == "3":
            print("\nTus respuestas:")
            for i, respuesta in enumerate(respuestas_usuario, 1):
                print(f"Pregunta {i}: {respuesta}")

        elif option == "4":
            if equipo_pokemon:
                content = "Sugerir los mejores movimientos para este equipo: " + equipo_pokemon
                messages.append({"role": "user", "content": content})
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=messages
                )
                response_content = response.choices[0].message.content
                messages.append({"role": "assistant", "content": response_content})
                print(f"> {response_content}")
            else:
                print("Primero debes obtener una recomendaci√≥n de equipo.")
        
        elif option == "5":
            pokemon_list = sugerir_movimientos_pokemon_especificos()
            content = "Sugerir los mejores movimientos para los siguientes Pok√©mon: " + str(pokemon_list)
            messages.append({"role": "user", "content": content})
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=messages
            )
            response_content = response.choices[0].message.content
            messages.append({"role": "assistant", "content": response_content})
            print(f"> {response_content}")
        
        elif option == "6":
            content = "Dame los mejores consejos para la crianza Pokemon"
            messages.append({"role": "user", "content": content})
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=messages
            )
            response_content = response.choices[0].message.content
            messages.append({"role": "assistant", "content": response_content})
            print(f"> {response_content}")
        
        elif option =="7":
            mejor_bot()
        
        elif option == "8":
            # Volver al men√∫ principal
            print("Volviendo al men√∫ principal.")
            break
        else:
            print("Opci√≥n no v√°lida, por favor selecciona una opci√≥n del men√∫.")

if __name__ == "__main__":
    main()
